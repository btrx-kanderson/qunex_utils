
import os
import glob
import functools
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import sys
sys.path.append('/home/ubuntu/Projects/qunex_utils/qunex_utils')
from qunex import qunex 
from utils_read import read_freesurfer, read_mask_stats, read_bold_motion
    
    

def outliers(out_dir):
    '''
    Identify quantiative outliers from previously extracted QUNEX features
    '''
    
    # read data generated by "wrangle.py"
    # -----------------
    motion_df   = _read_data(os.path.join(out_dir, 'data/bold_motion_estimates.csv'))
    mask_df     = _read_data(os.path.join(out_dir, 'data/bold_mask_estimates.csv'))
    fs_df       = _read_data(os.path.join(out_dir, 'data/freesurfer_estimates.csv'))


    # -----------------
    # mark quantitative outliers
    # Motion/Mask/Freesurfer phenotypes get their own outlier detection functions,
    # b/c of differences in data formatting
    # -----------------
    # Head motion 
    motion_outlier_df, motion_df_wide, motion_outlier_path = _motion_outliers(motion_df, out_dir)
    # EPI Mask Coverage
    mask_outlier_df, mask_df_wide, mask_outlier_path = _mask_outliers(mask_df, out_dir)
    # Freesurfer phenotypes
    freesurf_eTIV_resid_df, fs_phenos, fs_outlier_df, fs_outlier_path  = _freesurfer_outliers(fs_df, out_dir)
    # -----------------


    # -----------------
    # generate histograms for each feature 
    # -----------------
    # Head Motion
    motion_phenos = [x for x in motion_df_wide.columns if x != 'id'] 
    x = list(map(functools.partial(plot_histograms, df=motion_df_wide, out_dir=out_dir), motion_phenos))

    # EPI Mask Coverage
    mask_phenos = [x for x in mask_df_wide.columns if x != 'id']
    x = list(map(functools.partial(plot_histograms, df=mask_df_wide, out_dir=out_dir), mask_phenos))
    
    # Freesurfer
    fs_stdev = freesurf_eTIV_resid_df[fs_phenos].std(0)
    run_fs_phenos = list(fs_stdev[fs_stdev != 0].index)
    x = list(map(functools.partial(plot_histograms, df=freesurf_eTIV_resid_df, out_dir=out_dir), run_fs_phenos))
    # -----------------

    return motion_out, mask_out, fs_out



def summary_counts(outlier_df_list, out_dir):
    '''
    Count the number of outliers (1) per QUNEX run and (2) per phenotype
    '''
    # concatenate list of outlier dataframes
    all_outliers = pd.concat(outlier_df_list, 0)

    # count number of outliers per QUNEX id/run
    subj_out_counts    = all_outliers.value_counts('id')
    subj_outlier_ct_df = pd.DataFrame({'id':subj_out_counts.index, 'num_outliers': subj_out_counts.values})

    # count number of outliers per phenotype
    pheno_out_counts    = all_outliers.value_counts('pheno')
    pheno_outlier_ct_df = pd.DataFrame({'id':pheno_out_counts.index, 'num_outliers': pheno_out_counts.values})

    # write outlier counts to the output directory
    subj_outlier_ct_df.to_csv(os.path.join(out_dir, 'qc', 'outlier_counts_by_run.csv'), index=None)
    pheno_outlier_ct_df.to_csv(os.path.join(out_dir, 'qc', 'outlier_counts_by_feature.csv'), index=None)



def plot_histograms(pheno, df, out_dir):
    '''
    Plot two histograms with z-value vertical lines
    The first histogram shows raw-values
    The second histogram shows z-scores
    '''

    neumora_color = '#57d471'
    plt.rcParams["font.family"] = "Roboto"

    # (1) Histogram with raw values
    fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(8, 6))
    fig.suptitle(pheno, y=0.95)
    axes[0].hist(x=df[pheno], bins=40, color=neumora_color)
    axes[0].set_xlabel(pheno)
    axes[0].set_ylabel('Count')
    axes[0].set_xlabel('Raw Values')

    # (2) Histogram with z-scores
    z_score = (df[pheno] - np.mean(df[pheno]))/np.std(df[pheno])
    axes[1].hist(x=z_score, bins=40, color=neumora_color)
    axes[1].set_xlabel('Z-score')
    axes[1].set_ylabel('Count')
    axes[1].axvline(4, color='red', linestyle='dashed', linewidth=1)
    axes[1].axvline(3, color='darkgray', linestyle='dashed', linewidth=1)
    axes[1].axvline(-4, color='red', linestyle='dashed', linewidth=1)
    axes[1].axvline(-3, color='darkgray', linestyle='dashed', linewidth=1)

    # write to file
    pheno_out = os.path.join(out_dir, 'viz/pheno_histograms/hist_{}.png'.format(pheno))
    fig.savefig(fname=pheno_out, format='png', bbox_inches='tight')



def mark_quantitative_outliers(pheno, df, id='id', z=3):
    '''
    Like it says, find quantitative outliers and return a dataframe
    '''
    # mean/variance norm
    z_score     = (df[pheno] - np.mean(df[pheno]))/np.std(df[pheno])
    z_df        = pd.DataFrame({'id':df.index, 'pheno':pheno, 'zscore':z_score})
    outlier_df  = z_df.loc[z_df['zscore'].abs() > z]
    #print('{}: \t\t{} outlier(s)'.format(pheno, outlier_df.shape[0]))
    return outlier_df


def _freesurfer_outliers(df, out_dir):
    '''
    Identify Freesurfer outliers

    GrayVol and SurfArea phenotypes are normalized for head size (i.e. estimated total intracranial volume; eTIV)
    '''
    df.index   = df['id']

    # list of phenotypes (the new *_eTIVresid phenos get added)
    pheno_list  = []
    
    # columns with freesurfer data
    fs_phenos   = [x for x in df.columns if x != 'id']
    fs_outliers = []
    for pheno in fs_phenos:
        # residualize eTIV from phenotypes that are head-size dependent
        if 'GrayVol' in pheno or 'SurfArea' in pheno:
            # linear regress/residualize
            X   = np.array(df['EstimatedTotalIntraCranialVol']).reshape(-1, 1)
            y   = np.array(df[pheno]).reshape(-1, 1)
            reg = LinearRegression().fit(X, y)
            y_resid = np.array(y - reg.predict(X)).reshape(1,-1)[0]
            
            # add resid values to the dataframe
            df['{}_eTIVresid'.format(pheno)] = y_resid
            # find outliers
            fs_outliers.append(mark_quantitative_outliers(pheno='{}_eTIVresid'.format(pheno), df=df, id='id', z=3))
            pheno_list.append('{}_eTIVresid'.format(pheno))
        else: 
            # find outliers
            fs_outliers.append(mark_quantitative_outliers(pheno=pheno, df=df, id='id', z=3))
            pheno_list.append(pheno)

    # dataframe with all found outliers
    fs_outlier_df = pd.concat(fs_outliers)
    fs_outlier_df = fs_outlier_df.reset_index(drop=True)

    # write
    fs_outlier_path = os.path.join(out_dir, 'qc/freesurfer_outlier_subjects.csv')
    fs_outlier_df.to_csv(fs_outlier_path, index=None)
    return df, pheno_list, fs_outlier_df, fs_outlier_path



def _motion_outliers(motion_df, out_dir):
    '''
    Outliers for Head Motion phenotypes
    '''
    # reshape motion from long to wide
    measures = set(motion_df['measure'])
    lst = []
    for meas in measures:
        motion_wide = motion_df.loc[motion_df['measure'] == meas].pivot(index='id', values='motion', columns='scan')
        motion_wide.columns = ['{}_{}'.format(meas, x) for x in motion_wide.columns]
        lst.append(motion_wide)
    motion_df_wide = pd.concat(lst, 1)

    # identify distributional outliers 
    motion_outliers = list(map(functools.partial(mark_quantitative_outliers, df=motion_df_wide, id='id', z=3), motion_df_wide.columns))

    # merge list of dataframes
    motion_outlier_df = pd.concat(motion_outliers)

    # write
    motion_outlier_path = os.path.join(out_dir, 'qc/motion_outlier_subjects.csv')
    motion_outlier_df.to_csv(motion_outlier_path, index=None)

    return motion_outlier_df, motion_df_wide, motion_outlier_path



def _mask_outliers(mask_df, out_dir):
    '''
    Outliers for BOLD Mask coverage
    '''
    mask_df.columns = mask_df.columns.str.replace(' ', '')
    mask_df_wide = mask_df[['id', 'PctBrainCoverage', 'bold']].pivot(columns='bold', values='PctBrainCoverage', index='id')
    mask_df_wide.columns = ['PctBrainCoverage_bold{}'.format(x) for x in mask_df_wide.columns]

    # identify distributional outliers 
    mask_outliers = list(map(functools.partial(mark_quantitative_outliers, df=mask_df_wide, id='id', z=3), mask_df_wide.columns))

    # merge list of dataframes
    mask_outlier_df = pd.concat(motion_outliers)

    # write
    mask_outlier_path = os.path.join(out_dir, 'qc/mask_outlier_subjects.csv')
    mask_outlier_df.to_csv(mask_outlier_path, index=None)

    return mask_outlier_df, mask_df_wide, mask_outlier_path



def _read_data(file_path):
    '''
    wrapper for reading qunex motion/mask/freesurfer estimates 
    '''
    if os.path.exists(file_path):
        df = pd.read_csv(file_path)
        return df
    else:
        print('File does not exist: {}'.format(file_path))

